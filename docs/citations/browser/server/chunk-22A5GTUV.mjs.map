{
  "version": 3,
  "sources": ["src/app/models/Authors.ts", "src/app/services/Cites/Authors.ts"],
  "sourcesContent": ["export interface AuthorI {\n  getName(): string;\n  getCount(): number;\n  addCount(): number;\n}\n\nexport class Author implements AuthorI {\n  private name: string;\n  private count: number;\n\n  constructor(name: string, count = 1) {\n    this.name = name;\n    this.count = count;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getCount(): number {\n    return this.count;\n  }\n\n  addCount(): number {\n    this.count++;\n\n    return this.count;\n  }\n}\n", "import {\n  BehaviorSubject,\n  from,\n  Observable,\n  concatAll,\n  distinct,\n  groupBy,\n  map,\n  mergeMap,\n  skipUntil,\n  switchMap,\n  take,\n  toArray,\n  skip,\n} from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Cites } from '../Cites';\nimport { Author, AuthorI } from '../../models/Authors';\n\n@Injectable()\nexport class Authors {\n  protected authors: BehaviorSubject<AuthorI[]> = new BehaviorSubject<\n    AuthorI[]\n  >([]);\n  public authors$: Observable<AuthorI[]> = this.authors.asObservable().pipe(\n    // this is for a kind of immutability: if something push/pop/shift/... the CiteI[] it\n    // won't alter every subcriber that has saved the data\n    // map(next => rfdc({proto: true})(next)), // @todo find why it destroy the original object : Author\n    // become a simple object & the proto is not copied\n    map((next) => {\n      return next.map((author) => {\n        return new Author(author.getName(), author.getCount());\n      });\n    }),\n    distinct(),\n    take(1) // auto unsubscribe, force complete\n  );\n  // local cache for the counter\n  protected count = 0;\n\n  public constructor(protected citeService: Cites) {\n    const authors: AuthorI[] = [];\n\n    citeService.cites$\n      .pipe(\n        switchMap((next) => from(next)),\n        map((next) => next.getAuthor()),\n        map((next) => {\n          let author: AuthorI;\n          if (authors.find((item) => item.getName() === next)) {\n            const index = authors.findIndex((item) => item.getName() === next);\n            authors[index].addCount();\n            author = authors[index];\n          } else {\n            author = new Author(next);\n            authors.push(author);\n          }\n\n          return author;\n        }),\n        distinct(),\n        // prevent going further until cites is not fully loaded\n        skipUntil(citeService.cites$),\n        // build to 2 streams : one with proverbe and another with the rest to improve the sort\n        groupBy((next) => next.getName().toLowerCase().includes('proverbe')),\n        mergeMap((group) =>\n          group.pipe(\n            toArray(),\n            map((next) => {\n              return next.sort((a, b) => {\n                const aParts = a.getName().split(' ');\n                const bParts = b.getName().split(' ');\n                const aLastname =\n                  (aParts.length > 1 ? aParts.pop() : aParts.shift()) ?? '';\n                const aFirstname = aParts[0];\n                const bLastname =\n                  (bParts.length > 1 ? bParts.pop() : bParts.shift()) ?? '';\n                const bFirstname = bParts[0];\n\n                if (aLastname.toLowerCase() < bLastname.toLowerCase()) {\n                  return -1;\n                } else if (aLastname.toLowerCase() > bLastname.toLowerCase()) {\n                  return 1;\n                } else if (aFirstname) {\n                  if (aFirstname.toLowerCase() < bFirstname.toLowerCase()) {\n                    return -1;\n                  } else if (\n                    aFirstname.toLowerCase() > bFirstname.toLowerCase()\n                  ) {\n                    return 1;\n                  }\n\n                  return 0;\n                }\n\n                return 0;\n              });\n            })\n          )\n        ),\n        concatAll(),\n        toArray(),\n        take(1) // auto unsubscribe, force complete\n      )\n      .subscribe((next) => {\n        this.authors.next(next as AuthorI[]);\n      });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAMM,IAAOA,SAAP,MAAa;EAIjBC,YAAYC,MAAcC,QAAQ,GAAC;AACjC,SAAKD,OAAOA;AACZ,SAAKC,QAAQA;EACf;EAEAC,UAAO;AACL,WAAO,KAAKF;EACd;EAEAG,WAAQ;AACN,WAAO,KAAKF;EACd;EAEAG,WAAQ;AACN,SAAKH;AAEL,WAAO,KAAKA;EACd;;;;ACPF,IAAaI,UAAO,uBAAA;AAAd,QAAOA,WAAP,MAAOA,SAAO;IAoBlBC,YAA6BC,aAAkB;AAAlB,WAAAA,cAAAA;AAnBnB,WAAAC,UAAsC,IAAIC,gBAElD,CAAA,CAAE;AACG,WAAAC,WAAkC,KAAKF,QAAQG,aAAY,EAAGC;;;;;QAKnEC,IAAKC,UAAQ;AACX,iBAAOA,KAAKD,IAAKE,YAAU;AACzB,mBAAO,IAAIC,OAAOD,OAAOE,QAAO,GAAIF,OAAOG,SAAQ,CAAE;UACvD,CAAC;QACH,CAAC;QACDC,SAAQ;QACRC,KAAK,CAAC;;;AAGE,WAAAC,QAAQ;AAGhB,YAAMb,UAAqB,CAAA;AAE3BD,kBAAYe,OACTV;QACCW,UAAWT,UAASU,KAAKV,IAAI,CAAC;QAC9BD,IAAKC,UAASA,KAAKW,UAAS,CAAE;QAC9BZ,IAAKC,UAAQ;AACX,cAAIC;AACJ,cAAIP,QAAQkB,KAAMC,UAASA,KAAKV,QAAO,MAAOH,IAAI,GAAG;AACnD,kBAAMc,QAAQpB,QAAQqB,UAAWF,UAASA,KAAKV,QAAO,MAAOH,IAAI;AACjEN,oBAAQoB,KAAK,EAAEE,SAAQ;AACvBf,qBAASP,QAAQoB,KAAK;iBACjB;AACLb,qBAAS,IAAIC,OAAOF,IAAI;AACxBN,oBAAQuB,KAAKhB,MAAM;;AAGrB,iBAAOA;QACT,CAAC;QACDI,SAAQ;;QAERa,UAAUzB,YAAYe,MAAM;;QAE5BW,QAASnB,UAASA,KAAKG,QAAO,EAAGiB,YAAW,EAAGC,SAAS,UAAU,CAAC;QACnEC,SAAUC,WACRA,MAAMzB,KACJ0B,QAAO,GACPzB,IAAKC,UAAQ;AACX,iBAAOA,KAAKyB,KAAK,CAACC,GAAGC,MAAK;AACxB,kBAAMC,SAASF,EAAEvB,QAAO,EAAG0B,MAAM,GAAG;AACpC,kBAAMC,SAASH,EAAExB,QAAO,EAAG0B,MAAM,GAAG;AACpC,kBAAME,aACHH,OAAOI,SAAS,IAAIJ,OAAOK,IAAG,IAAKL,OAAOM,MAAK,MAAO;AACzD,kBAAMC,aAAaP,OAAO,CAAC;AAC3B,kBAAMQ,aACHN,OAAOE,SAAS,IAAIF,OAAOG,IAAG,IAAKH,OAAOI,MAAK,MAAO;AACzD,kBAAMG,aAAaP,OAAO,CAAC;AAE3B,gBAAIC,UAAUX,YAAW,IAAKgB,UAAUhB,YAAW,GAAI;AACrD,qBAAO;uBACEW,UAAUX,YAAW,IAAKgB,UAAUhB,YAAW,GAAI;AAC5D,qBAAO;uBACEe,YAAY;AACrB,kBAAIA,WAAWf,YAAW,IAAKiB,WAAWjB,YAAW,GAAI;AACvD,uBAAO;yBAEPe,WAAWf,YAAW,IAAKiB,WAAWjB,YAAW,GACjD;AACA,uBAAO;;AAGT,qBAAO;;AAGT,mBAAO;UACT,CAAC;QACH,CAAC,CAAC,CACH;QAEHkB,UAAS;QACTd,QAAO;QACPlB,KAAK,CAAC;;QAEPiC,UAAWvC,UAAQ;AAClB,aAAKN,QAAQM,KAAKA,IAAiB;MACrC,CAAC;IACL;;;qBAvFWT,UAAOiD,mBAAAC,KAAA,CAAA;EAAA;;WAAPlD;IAAOmD,SAAPnD,SAAOoD;EAAA,CAAA;AAAd,MAAOpD,WAAP;SAAOA;AAAO,GAAA;",
  "names": ["Author", "constructor", "name", "count", "getName", "getCount", "addCount", "Authors", "constructor", "citeService", "authors", "BehaviorSubject", "authors$", "asObservable", "pipe", "map", "next", "author", "Author", "getName", "getCount", "distinct", "take", "count", "cites$", "switchMap", "from", "getAuthor", "find", "item", "index", "findIndex", "addCount", "push", "skipUntil", "groupBy", "toLowerCase", "includes", "mergeMap", "group", "toArray", "sort", "a", "b", "aParts", "split", "bParts", "aLastname", "length", "pop", "shift", "aFirstname", "bLastname", "bFirstname", "concatAll", "subscribe", "\u0275\u0275inject", "Cites", "factory", "\u0275fac"]
}
