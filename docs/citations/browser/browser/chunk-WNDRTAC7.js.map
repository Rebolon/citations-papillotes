{
  "version": 3,
  "sources": ["src/app/tools/Device.ts", "src/app/services/Pager/pager-list-parts.ts", "src/app/services/Pager/pager.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Device {\n  isMobile(): boolean {\n    // This check is for prerender prevent errors\n    return Object.keys(navigator).length\n      ? navigator.userAgent.includes('Mobile')\n      : false;\n  }\n\n  isDesktop(): boolean {\n    return !this.isMobile();\n  }\n}\n", "import { PagerListInterface, PagerListPartsInterface } from './pager.interface';\n\nexport class PagerListParts implements PagerListPartsInterface {\n  private pager: Array<PagerListInterface> = [];\n  private pagerFirstEdges: Array<PagerListInterface> = [];\n  private pagerLastEdges: Array<PagerListInterface> = [];\n  private pagerNumbers: Array<PagerListInterface> = [];\n\n  constructor(pager: Array<PagerListInterface>) {\n    this.pager = pager;\n    this.pagerFirstEdges = this.pager.filter((value, index) => {\n      return index < 2;\n    });\n\n    this.pagerLastEdges = this.pager\n      .slice()\n      .reverse()\n      .filter((value, index) => {\n        return index < 2;\n      })\n      .reverse();\n\n    this.pagerNumbers = this.pager.filter((value, index) => {\n      return (\n        !this.pagerFirstEdges.includes(value) &&\n        !this.pagerLastEdges.includes(value)\n      );\n    });\n  }\n\n  getAll(): Array<PagerListInterface> {\n    return this.pager;\n  }\n\n  getFirstEdges(): Array<PagerListInterface> {\n    return this.pagerFirstEdges;\n  }\n\n  getLastEdges(): Array<PagerListInterface> {\n    return this.pagerLastEdges;\n  }\n\n  getNumbers(): Array<PagerListInterface> {\n    return this.pagerNumbers;\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport {\n  PagerInterface,\n  PagerListInterface,\n  PagerListPartsInterface,\n  PagerNavigationInterface,\n  PagerOptionsInterface,\n  PagerTemplateInterface,\n} from './pager.interface';\nimport { PagerListParts } from './pager-list-parts';\nimport { BehaviorSubject, filter, map } from 'rxjs';\n\nexport class TotalPageNotSet extends Error {}\nexport class FirstPageNotSet extends Error {}\nexport class LastPageNotSet extends Error {}\nexport class CurrentPageNotSet extends Error {}\nexport class PageRequestedIsLessThanFirstPage extends Error {}\nexport class PagerAlreadyInitialized extends Error {}\nexport class PageIndexDoesNotExists extends Error {}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PagerService\n  implements PagerInterface, PagerNavigationInterface, PagerTemplateInterface\n{\n  private originalList: number[] = [];\n  private itemPerPage = 5;\n  private maxPagerItem = 5;\n  private firstPage = 1;\n  private totalPage = 1;\n  private lastPage = 1;\n  private previousPage = 1;\n  private nextPage = 1;\n  private currentPage = new BehaviorSubject(1);\n  private pagerIndexList: Array<number> = [];\n  private pagerItemList: PagerListPartsInterface =\n    {} as PagerListPartsInterface;\n  public currentPage$ = this.currentPage\n    .asObservable()\n    .pipe(filter((value) => !!value));\n  public currentOffset$ = this.currentPage.asObservable().pipe(\n    filter((value) => !!value),\n    map((value) => {\n      return this.getOffsetForPage(value);\n    })\n  );\n\n  constructor() {}\n\n  init(list: Array<any> | number, options?: PagerOptionsInterface): void {\n    /** Seems to be a source of bug : authors page, swith between alpha and total fails because of this\n    if (this.pagerIndexList.length) {\n      return\n    }*/\n\n    if (typeof list !== 'object') {\n      this.originalList = new Array(list).fill(0);\n    } else {\n      this.originalList = list;\n    }\n\n    this.setOptions(options)\n      .resetPage()\n      .setTotalPage(list)\n      .calculateLastPage()\n      .calculateCurrentPage()\n      .calculatePreviousPage()\n      .calculateNextPage()\n      .createIndexList()\n      .buildPagerList();\n  }\n\n  isCurrentPage(pageIndex: number): boolean {\n    return this.currentPage.getValue() === pageIndex;\n  }\n\n  getOffset(): number {\n    return this.getOffsetForPage(this.getCurrentPage());\n  }\n\n  getOffsetForPage(page: number): number {\n    if (page < this.firstPage) {\n      throw new PageRequestedIsLessThanFirstPage();\n    }\n\n    if (page === this.firstPage) {\n      return 0;\n    }\n\n    return (page - 1) * this.itemPerPage;\n  }\n\n  getTotalPage(): number {\n    return this.totalPage;\n  }\n\n  getFirstPage(): number {\n    return this.firstPage;\n  }\n\n  getLastPage(): number {\n    return this.lastPage;\n  }\n\n  getCurrentPage(): number {\n    return this.currentPage.getValue();\n  }\n\n  getPreviousPage(): number {\n    return this.previousPage;\n  }\n\n  getNextPage(): number {\n    return this.nextPage;\n  }\n\n  getPaginatedList(): Array<any> {\n    const startOffset = this.getOffset();\n    const endOffset = startOffset + this.itemPerPage;\n\n    return this.originalList.slice(startOffset, endOffset);\n  }\n\n  goToPage(pageIndex: number): number {\n    if (this.getCurrentPage() === pageIndex) {\n      return this.getCurrentPage();\n    }\n\n    if (this.pagerIndexList.includes(pageIndex)) {\n      this.currentPage.next(pageIndex);\n      this.calculatePreviousPage();\n      this.calculateNextPage();\n      this.createIndexList();\n      this.buildPagerList();\n    } else {\n      throw new PageIndexDoesNotExists();\n    }\n\n    return this.currentPage.getValue();\n  }\n\n  goToFirstPage(): number {\n    if (this.currentPage.getValue() === this.firstPage) {\n      return this.currentPage.getValue();\n    }\n\n    this.currentPage.next(this.firstPage);\n    this.previousPage = this.firstPage;\n    this.calculateNextPage();\n    this.createIndexList();\n    this.buildPagerList();\n\n    return this.currentPage.getValue();\n  }\n\n  goToLastPage(): number {\n    if (this.currentPage.getValue() === this.lastPage) {\n      return this.currentPage.getValue();\n    }\n\n    this.currentPage.next(this.lastPage);\n    this.nextPage = this.lastPage;\n    this.calculatePreviousPage();\n    this.createIndexList();\n    this.buildPagerList();\n\n    return this.currentPage.getValue();\n  }\n\n  goToNextPage(): number {\n    if (this.currentPage.getValue() === this.nextPage) {\n      return this.currentPage.getValue();\n    }\n\n    this.previousPage = this.currentPage.getValue();\n    this.currentPage.next(this.nextPage);\n    this.calculateNextPage();\n    this.createIndexList();\n    this.buildPagerList();\n\n    return this.currentPage.getValue();\n  }\n\n  goToPreviousPage(): number {\n    if (this.currentPage.getValue() === this.previousPage) {\n      return this.currentPage.getValue();\n    }\n\n    this.nextPage = this.currentPage.getValue();\n    this.currentPage.next(this.previousPage);\n    this.calculatePreviousPage();\n    this.createIndexList();\n    this.buildPagerList();\n\n    return this.currentPage.getValue();\n  }\n\n  getPagerIndexList(): Array<number> {\n    return this.pagerIndexList;\n  }\n\n  getPagerItemList(): PagerListPartsInterface {\n    return this.pagerItemList;\n  }\n\n  private setOptions(options?: PagerOptionsInterface): PagerService {\n    if (!options) {\n      return this;\n    }\n\n    if (typeof options.itemPerPage !== 'undefined') {\n      this.itemPerPage = options.itemPerPage;\n    }\n\n    if (typeof options.maxPagerItem !== 'undefined') {\n      this.maxPagerItem = options.maxPagerItem;\n    }\n\n    return this;\n  }\n\n  private setTotalPage(list: Array<any> | number): PagerService {\n    let count = typeof list === 'object' ? list.length : list;\n    this.totalPage = Math.ceil(count / this.itemPerPage);\n\n    return this;\n  }\n\n  private setFirstPage(firstPage: number): PagerService {\n    this.firstPage = firstPage >= 0 ? firstPage : this.firstPage;\n\n    return this;\n  }\n\n  private resetPage(): PagerService {\n    this.currentPage.next(this.firstPage);\n\n    return this;\n  }\n\n  private calculateLastPage(): PagerService {\n    if (this.totalPage === null) {\n      throw new TotalPageNotSet();\n    }\n\n    if (this.firstPage === null) {\n      throw new FirstPageNotSet();\n    }\n\n    this.lastPage = this.totalPage - 1 + this.firstPage;\n\n    return this;\n  }\n\n  private calculateCurrentPage(): PagerService {\n    if (this.lastPage === null) {\n      throw new LastPageNotSet();\n    }\n\n    if (this.firstPage === null) {\n      throw new FirstPageNotSet();\n    }\n\n    const currentPage = this.getCurrentPage();\n\n    this.currentPage.next(\n      this.currentPage.getValue() < this.firstPage\n        ? this.firstPage\n        : currentPage > this.lastPage\n        ? this.lastPage\n        : currentPage\n    );\n\n    return this;\n  }\n\n  private calculatePreviousPage(): PagerService {\n    if (this.currentPage === null) {\n      throw new CurrentPageNotSet();\n    }\n    if (this.firstPage === null) {\n      throw new FirstPageNotSet();\n    }\n\n    const previousPage = this.currentPage.getValue() - 1;\n    this.previousPage =\n      previousPage >= this.firstPage ? previousPage : this.firstPage;\n\n    return this;\n  }\n\n  /**\n   * @todo _nextPage depends on curPage and lastPage => there must be events to modify this property when one of those are modified\n   */\n  private calculateNextPage(): PagerService {\n    if (this.lastPage === null) {\n      throw new LastPageNotSet();\n    }\n    if (this.currentPage === null) {\n      throw new CurrentPageNotSet();\n    }\n\n    const nextPage = this.currentPage.getValue() + 1;\n    this.nextPage = nextPage <= this.lastPage ? nextPage : this.lastPage;\n\n    return this;\n  }\n\n  private createIndexList(): PagerService {\n    if (this.lastPage === null) {\n      throw new LastPageNotSet();\n    }\n\n    if (this.currentPage === null) {\n      throw new CurrentPageNotSet();\n    }\n\n    if (this.totalPage === null) {\n      throw new TotalPageNotSet();\n    }\n\n    if (this.firstPage === null) {\n      throw new FirstPageNotSet();\n    }\n\n    const nbItemOnSide = Math.floor(this.maxPagerItem / 2);\n    const nbItemPerPageFromEnd = this.lastPage - this.maxPagerItem + 1;\n    let startOffset;\n\n    if (this.currentPage.getValue() <= nbItemOnSide) {\n      startOffset = this.firstPage;\n    } else if (this.lastPage - this.currentPage.getValue() <= nbItemOnSide) {\n      startOffset =\n        nbItemPerPageFromEnd <= this.firstPage\n          ? this.firstPage\n          : nbItemPerPageFromEnd;\n    } else {\n      startOffset = this.currentPage.getValue() - nbItemOnSide;\n    }\n\n    const nbItemPerPageFromStart = startOffset + (this.maxPagerItem - 1);\n    const endOffset =\n      nbItemPerPageFromStart > this.lastPage\n        ? this.lastPage\n        : nbItemPerPageFromStart;\n\n    this.pagerIndexList = [];\n    for (let i = startOffset; i <= endOffset; i++) {\n      this.pagerIndexList.push(i);\n    }\n\n    return this;\n  }\n\n  private buildPagerList(): PagerListPartsInterface {\n    let pager: Array<PagerListInterface> = [];\n\n    if (this.pagerIndexList.length) {\n      this.pagerIndexList.forEach((item) => {\n        pager.push({\n          index: item,\n          label: item.toString(),\n        });\n      });\n\n      pager = pager.filter((item, index) => {\n        return index < this.maxPagerItem;\n      });\n    }\n\n    pager.unshift({\n      index: this.getPreviousPage(),\n      label: '<',\n    });\n\n    pager.unshift({\n      index: this.getFirstPage(),\n      label: '<<',\n    });\n\n    pager.push({\n      index: this.getNextPage(),\n      label: '>',\n    });\n    pager.push({\n      index: this.getLastPage(),\n      label: '>>',\n    });\n\n    this.pagerItemList = new PagerListParts(pager);\n\n    return this.pagerItemList;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Device", "isMobile", "Object", "keys", "navigator", "length", "userAgent", "includes", "isDesktop", "factory", "\u0275fac", "PagerListParts", "constructor", "pager", "pagerFirstEdges", "pagerLastEdges", "pagerNumbers", "filter", "value", "index", "slice", "reverse", "includes", "getAll", "getFirstEdges", "getLastEdges", "getNumbers", "TotalPageNotSet", "Error", "FirstPageNotSet", "LastPageNotSet", "CurrentPageNotSet", "PageRequestedIsLessThanFirstPage", "PageIndexDoesNotExists", "Error", "PagerService", "constructor", "originalList", "itemPerPage", "maxPagerItem", "firstPage", "totalPage", "lastPage", "previousPage", "nextPage", "currentPage", "BehaviorSubject", "pagerIndexList", "pagerItemList", "currentPage$", "asObservable", "pipe", "filter", "value", "currentOffset$", "map", "getOffsetForPage", "init", "list", "options", "Array", "fill", "setOptions", "resetPage", "setTotalPage", "calculateLastPage", "calculateCurrentPage", "calculatePreviousPage", "calculateNextPage", "createIndexList", "buildPagerList", "isCurrentPage", "pageIndex", "getValue", "getOffset", "getCurrentPage", "page", "PageRequestedIsLessThanFirstPage", "getTotalPage", "getFirstPage", "getLastPage", "getPreviousPage", "getNextPage", "getPaginatedList", "startOffset", "endOffset", "slice", "goToPage", "includes", "next", "goToFirstPage", "goToLastPage", "goToNextPage", "goToPreviousPage", "getPagerIndexList", "getPagerItemList", "count", "length", "Math", "ceil", "setFirstPage", "TotalPageNotSet", "FirstPageNotSet", "LastPageNotSet", "CurrentPageNotSet", "nbItemOnSide", "floor", "nbItemPerPageFromEnd", "nbItemPerPageFromStart", "i", "push", "pager", "forEach", "item", "index", "label", "toString", "unshift", "PagerListParts", "factory", "\u0275fac", "providedIn"]
}
